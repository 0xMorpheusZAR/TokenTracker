import React, { useState, useEffect } from 'react';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import { Zap, Target, Shield, TrendingUp, AlertCircle, Layers, Globe, DollarSign, RefreshCw, Eye, Search, Timer } from 'lucide-react';

const DeFiAlphaAdvanced = () => {
  const [activeView, setActiveView] = useState('mev');
  const [selectedPool, setSelectedPool] = useState(null);
  const [portfolioRisk, setPortfolioRisk] = useState(null);

  // MEV Opportunities Mock Data
  const mevOpportunities = [
    {
      id: 1,
      type: 'sandwich',
      pool: 'WETH/USDC',
      dex: 'Uniswap V3',
      targetTx: '0x1234...5678',
      estimatedProfit: 0.089,
      gasEstimate: 0.023,
      netProfit: 0.066,
      confidence: 92,
      timeWindow: '< 2 blocks',
      liquidity: 4500000
    },
    {
      id: 2,
      type: 'arbitrage',
      pool: 'ARB/ETH',
      dex: 'SushiSwap ‚Üí Camelot',
      spread: 0.0034,
      estimatedProfit: 0.125,
      gasEstimate: 0.031,
      netProfit: 0.094,
      confidence: 87,
      timeWindow: 'immediate',
      liquidity: 2300000
    },
    {
      id: 3,
      type: 'liquidation',
      protocol: 'Aave V3',
      position: '0xabcd...efgh',
      collateral: 'ETH',
      debt: 'USDC',
      healthFactor: 1.02,
      estimatedProfit: 0.340,
      gasEstimate: 0.045,
      netProfit: 0.295,
      confidence: 78,
      timeWindow: '5-10 min'
    }
  ];

  // On-chain DEX Intelligence
  const dexPools = [
    {
      pair: 'PEPE/WETH',
      address: '0x11b8...15f2',
      dex: 'Uniswap V3',
      volume24h: 23400000,
      volumeChange: 234.5,
      tvl: 4560000,
      newHolders24h: 1234,
      whaleActivity: 'high',
      impermanentLoss: -8.2,
      trending: true
    },
    {
      pair: 'GMX/USDC',
      address: '0x8e5a...3b9c',
      dex: 'Camelot',
      volume24h: 8900000,
      volumeChange: 45.3,
      tvl: 12300000,
      newHolders24h: 432,
      whaleActivity: 'medium',
      impermanentLoss: -3.4,
      trending: false
    },
    {
      pair: 'ARB/USDT',
      address: '0x9f2c...7d4e',
      dex: 'Balancer',
      volume24h: 5670000,
      volumeChange: -12.3,
      tvl: 8900000,
      newHolders24h: 234,
      whaleActivity: 'low',
      impermanentLoss: -1.2,
      trending: false
    }
  ];

  // Narrative Performance Data
  const narrativeData = [
    { narrative: 'AI Agents', performance: 145, mcap: 3400000000, volume: 890000000 },
    { narrative: 'RWA', performance: 87, mcap: 5600000000, volume: 234000000 },
    { narrative: 'Gaming', performance: -23, mcap: 2100000000, volume: 123000000 },
    { narrative: 'DePIN', performance: 56, mcap: 1800000000, volume: 456000000 },
    { narrative: 'Liquid Staking', performance: 34, mcap: 23000000000, volume: 567000000 }
  ];

  // Historical correlation data for backtesting
  const correlationData = [
    { time: '00:00', flows: 100, price: 100 },
    { time: '04:00', flows: 145, price: 102 },
    { time: '08:00', flows: 189, price: 108 },
    { time: '12:00', flows: 234, price: 115 },
    { time: '16:00', flows: 178, price: 118 },
    { time: '20:00', flows: 156, price: 112 },
    { time: '24:00', flows: 167, price: 114 }
  ];

  // Portfolio risk metrics
  const portfolioData = {
    positions: [
      { protocol: 'Aave V3', chain: 'Ethereum', value: 125000, apy: 5.4, risk: 'low' },
      { protocol: 'GMX', chain: 'Arbitrum', value: 89000, apy: 23.4, risk: 'medium' },
      { protocol: 'Radiant', chain: 'Arbitrum', value: 45000, apy: 34.2, risk: 'high' },
      { protocol: 'Curve', chain: 'Ethereum', value: 234000, apy: 8.9, risk: 'low' },
      { protocol: 'Pendle', chain: 'Ethereum', value: 67000, apy: 12.3, risk: 'medium' }
    ],
    metrics: {
      totalValue: 560000,
      avgAPY: 16.84,
      sharpeRatio: 1.87,
      maxDrawdown: -23.4,
      var95: -45000,
      correlation: 0.67
    }
  };

  // Whale movements data
  const whaleMovements = [
    { 
      time: '2 min ago', 
      action: 'Deposit', 
      amount: '$4.5M USDC', 
      protocol: 'Aave V3', 
      wallet: '0x742d...8c3f',
      impact: 'Bullish',
      txHash: '0x1234...5678'
    },
    { 
      time: '15 min ago', 
      action: 'Withdraw', 
      amount: '2,340 ETH', 
      protocol: 'Lido', 
      wallet: '0x8f3a...2b5e',
      impact: 'Bearish',
      txHash: '0x8765...4321'
    },
    { 
      time: '1 hr ago', 
      action: 'Swap', 
      amount: '$8.9M ARB ‚Üí USDC', 
      protocol: 'Uniswap V3', 
      wallet: '0x3c9d...7f2a',
      impact: 'Bearish ARB',
      txHash: '0xabcd...efgh'
    }
  ];

  const COLORS = ['#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#3b82f6'];

  return (
    <div className="min-h-screen bg-black text-white p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent">
            DeFi Alpha Terminal - Advanced Analytics
          </h1>
          <p className="text-gray-400 mt-2">MEV Scanner ‚Ä¢ Portfolio Risk ‚Ä¢ On-Chain Intelligence</p>
        </div>

        {/* View Selector */}
        <div className="flex space-x-1 mb-6 bg-gray-900 rounded-lg p-1">
          {[
            { id: 'mev', name: 'MEV Scanner', icon: Zap },
            { id: 'dex', name: 'DEX Intelligence', icon: Layers },
            { id: 'portfolio', name: 'Portfolio Risk', icon: Shield },
            { id: 'narratives', name: 'Narrative Tracker', icon: Globe },
            { id: 'whale', name: 'Whale Watch', icon: Eye }
          ].map(view => (
            <button
              key={view.id}
              onClick={() => setActiveView(view.id)}
              className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-lg transition-all ${
                activeView === view.id 
                  ? 'bg-purple-600 text-white' 
                  : 'text-gray-400 hover:text-white hover:bg-gray-800'
              }`}
            >
              <view.icon className="w-4 h-4" />
              <span className="hidden sm:inline">{view.name}</span>
            </button>
          ))}
        </div>

        {/* MEV Scanner */}
        {activeView === 'mev' && (
          <div className="space-y-6">
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold">MEV Opportunities</h2>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-400">Auto-refresh</span>
                  <RefreshCw className="w-4 h-4 text-purple-400 animate-spin" />
                </div>
              </div>

              <div className="space-y-4">
                {mevOpportunities.map(opp => (
                  <div key={opp.id} className="bg-gray-800 rounded-lg p-4 hover:bg-gray-750 transition-all">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${
                          opp.type === 'sandwich' ? 'bg-yellow-900 text-yellow-400' :
                          opp.type === 'arbitrage' ? 'bg-green-900 text-green-400' :
                          'bg-red-900 text-red-400'
                        }`}>
                          {opp.type === 'sandwich' ? 'ü•™' :
                           opp.type === 'arbitrage' ? '‚ôªÔ∏è' : 'üíß'}
                        </div>
                        <div>
                          <h3 className="font-semibold capitalize">{opp.type} Opportunity</h3>
                          <p className="text-sm text-gray-400">{opp.pool || opp.protocol}</p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-6">
                        <div className="text-right">
                          <p className="text-sm text-gray-400">Est. Profit</p>
                          <p className="font-semibold text-green-400">{opp.estimatedProfit} ETH</p>
                          <p className="text-xs text-gray-500">Gas: {opp.gasEstimate} ETH</p>
                        </div>

                        <div className="text-right">
                          <p className="text-sm text-gray-400">Net Profit</p>
                          <p className="font-bold text-lg text-green-400">{opp.netProfit} ETH</p>
                          <p className="text-xs text-gray-500">${(opp.netProfit * 1800).toFixed(0)}</p>
                        </div>

                        <div className="text-right">
                          <p className="text-sm text-gray-400">Confidence</p>
                          <div className="flex items-center space-x-1">
                            <div className="w-24 bg-gray-700 rounded-full h-2">
                              <div 
                                className={`h-full rounded-full ${
                                  opp.confidence >= 90 ? 'bg-green-500' :
                                  opp.confidence >= 70 ? 'bg-yellow-500' :
                                  'bg-red-500'
                                }`}
                                style={{ width: `${opp.confidence}%` }}
                              />
                            </div>
                            <span className="text-sm font-semibold">{opp.confidence}%</span>
                          </div>
                        </div>

                        <div className="flex flex-col space-y-2">
                          <button className="px-4 py-1 bg-purple-600 hover:bg-purple-700 rounded text-sm font-semibold transition-colors">
                            Execute
                          </button>
                          <span className="text-xs text-gray-400 text-center">{opp.timeWindow}</span>
                        </div>
                      </div>
                    </div>

                    {opp.dex && (
                      <div className="mt-3 flex items-center space-x-4 text-sm text-gray-400">
                        <span>Route: {opp.dex}</span>
                        {opp.spread && <span>Spread: {(opp.spread * 100).toFixed(2)}%</span>}
                        <span>Liquidity: ${(opp.liquidity / 1e6).toFixed(1)}M</span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* MEV Performance Chart */}
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <h3 className="text-lg font-semibold mb-4">MEV Capture Performance (24h)</h3>
              <ResponsiveContainer width="100%" height={200}>
                <AreaChart data={[
                  { time: '00:00', value: 0 },
                  { time: '04:00', value: 2.3 },
                  { time: '08:00', value: 4.5 },
                  { time: '12:00', value: 8.9 },
                  { time: '16:00', value: 12.3 },
                  { time: '20:00', value: 14.5 },
                  { time: '24:00', value: 16.7 }
                ]}>
                  <defs>
                    <linearGradient id="colorMEV" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#8b5cf6" stopOpacity={0.8}/>
                      <stop offset="95%" stopColor="#8b5cf6" stopOpacity={0}/>
                    </linearGradient>
                  </defs>
                  <XAxis dataKey="time" stroke="#6b7280" />
                  <YAxis stroke="#6b7280" />
                  <Tooltip 
                    contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151' }}
                    labelStyle={{ color: '#9ca3af' }}
                  />
                  <Area type="monotone" dataKey="value" stroke="#8b5cf6" fillOpacity={1} fill="url(#colorMEV)" />
                </AreaChart>
              </ResponsiveContainer>
              <div className="mt-4 flex justify-between text-sm">
                <span className="text-gray-400">Total Captured: <span className="text-white font-semibold">16.7 ETH</span></span>
                <span className="text-gray-400">Success Rate: <span className="text-green-400 font-semibold">78%</span></span>
                <span className="text-gray-400">Avg Profit: <span className="text-white font-semibold">0.084 ETH</span></span>
              </div>
            </div>
          </div>
        )}

        {/* DEX Intelligence */}
        {activeView === 'dex' && (
          <div className="space-y-6">
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <h2 className="text-2xl font-bold mb-6">On-Chain DEX Intelligence</h2>

              <div className="space-y-4">
                {dexPools.map(pool => (
                  <div key={pool.address} className="bg-gray-800 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        {pool.trending && (
                          <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center animate-pulse">
                            üî•
                          </div>
                        )}
                        <div>
                          <h3 className="font-semibold text-lg">{pool.pair}</h3>
                          <p className="text-sm text-gray-400">{pool.dex} ‚Ä¢ {pool.address}</p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-6">
                        <div className="text-right">
                          <p className="text-sm text-gray-400">24h Volume</p>
                          <p className="font-semibold">${(pool.volume24h / 1e6).toFixed(1)}M</p>
                          <p className={`text-xs ${pool.volumeChange > 0 ? 'text-green-400' : 'text-red-400'}`}>
                            {pool.volumeChange > 0 ? '+' : ''}{pool.volumeChange.toFixed(1)}%
                          </p>
                        </div>

                        <div className="text-right">
                          <p className="text-sm text-gray-400">TVL</p>
                          <p className="font-semibold">${(pool.tvl / 1e6).toFixed(1)}M</p>
                          <p className="text-xs text-gray-500">IL: {pool.impermanentLoss.toFixed(1)}%</p>
                        </div>

                        <div className="text-right">
                          <p className="text-sm text-gray-400">New Holders</p>
                          <p className="font-semibold">{pool.newHolders24h.toLocaleString()}</p>
                          <p className={`text-xs px-2 py-1 rounded ${
                            pool.whaleActivity === 'high' ? 'bg-red-900 text-red-400' :
                            pool.whaleActivity === 'medium' ? 'bg-yellow-900 text-yellow-400' :
                            'bg-gray-700 text-gray-400'
                          }`}>
                            {pool.whaleActivity} whale activity
                          </p>
                        </div>

                        <button className="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded text-sm font-semibold transition-colors">
                          Analyze
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Top Trades */}
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <h3 className="text-lg font-semibold mb-4">Recent Large Trades</h3>
              <div className="space-y-2">
                {[
                  { time: '2 min ago', pair: 'PEPE/WETH', type: 'Buy', amount: '$234K', impact: '+2.3%' },
                  { time: '5 min ago', pair: 'ARB/USDC', type: 'Sell', amount: '$567K', impact: '-1.8%' },
                  { time: '12 min ago', pair: 'GMX/ETH', type: 'Buy', amount: '$123K', impact: '+0.9%' }
                ].map((trade, i) => (
                  <div key={i} className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <span className="text-sm text-gray-400">{trade.time}</span>
                    <span className="font-semibold">{trade.pair}</span>
                    <span className={`px-2 py-1 rounded text-sm ${
                      trade.type === 'Buy' ? 'bg-green-900 text-green-400' : 'bg-red-900 text-red-400'
                    }`}>
                      {trade.type} {trade.amount}
                    </span>
                    <span className={`text-sm ${
                      trade.impact.startsWith('+') ? 'text-green-400' : 'text-red-400'
                    }`}>
                      {trade.impact} impact
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Portfolio Risk Management */}
        {activeView === 'portfolio' && (
          <div className="space-y-6">
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <h2 className="text-2xl font-bold mb-6">Portfolio Risk Analytics</h2>

              {/* Risk Metrics Overview */}
              <div className="grid grid-cols-4 gap-4 mb-6">
                <div className="bg-gray-800 rounded-lg p-4">
                  <p className="text-sm text-gray-400 mb-1">Total Value</p>
                  <p className="text-2xl font-bold">${(portfolioData.metrics.totalValue / 1e3).toFixed(0)}K</p>
                  <p className="text-xs text-green-400">+12.3% 30d</p>
                </div>
                <div className="bg-gray-800 rounded-lg p-4">
                  <p className="text-sm text-gray-400 mb-1">Avg APY</p>
                  <p className="text-2xl font-bold">{portfolioData.metrics.avgAPY}%</p>
                  <p className="text-xs text-gray-400">Risk-adjusted</p>
                </div>
                <div className="bg-gray-800 rounded-lg p-4">
                  <p className="text-sm text-gray-400 mb-1">Sharpe Ratio</p>
                  <p className="text-2xl font-bold">{portfolioData.metrics.sharpeRatio}</p>
                  <p className="text-xs text-green-400">Excellent</p>
                </div>
                <div className="bg-gray-800 rounded-lg p-4">
                  <p className="text-sm text-gray-400 mb-1">VaR (95%)</p>
                  <p className="text-2xl font-bold text-red-400">-${Math.abs(portfolioData.metrics.var95 / 1e3).toFixed(0)}K</p>
                  <p className="text-xs text-gray-400">Daily risk</p>
                </div>
              </div>

              {/* Position Breakdown */}
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-semibold mb-4">Position Distribution</h3>
                  <ResponsiveContainer width="100%" height={250}>
                    <PieChart>
                      <Pie
                        data={portfolioData.positions}
                        cx="50%"
                        cy="50%"
                        innerRadius={60}
                        outerRadius={80}
                        paddingAngle={5}
                        dataKey="value"
                      >
                        {portfolioData.positions.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip 
                        formatter={(value) => `$${(value / 1e3).toFixed(0)}K`}
                        contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151' }}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                  <div className="space-y-2 mt-4">
                    {portfolioData.positions.map((pos, i) => (
                      <div key={i} className="flex items-center justify-between text-sm">
                        <div className="flex items-center space-x-2">
                          <div className={`w-3 h-3 rounded-full`} style={{ backgroundColor: COLORS[i % COLORS.length] }} />
                          <span>{pos.protocol}</span>
                        </div>
                        <span className="text-gray-400">${(pos.value / 1e3).toFixed(0)}K ({pos.apy}% APY)</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Risk Radar</h3>
                  <ResponsiveContainer width="100%" height={250}>
                    <RadarChart data={[
                      { risk: 'Protocol Risk', A: 75 },
                      { risk: 'Smart Contract', A: 82 },
                      { risk: 'Liquidity', A: 90 },
                      { risk: 'Market Risk', A: 65 },
                      { risk: 'Correlation', A: 70 }
                    ]}>
                      <PolarGrid stroke="#374151" />
                      <PolarAngleAxis dataKey="risk" stroke="#9ca3af" />
                      <PolarRadiusAxis angle={90} domain={[0, 100]} stroke="#374151" />
                      <Radar name="Risk Score" dataKey="A" stroke="#8b5cf6" fill="#8b5cf6" fillOpacity={0.6} />
                    </RadarChart>
                  </ResponsiveContainer>
                </div>
              </div>

              {/* Risk Alerts */}
              <div className="mt-6 space-y-2">
                <div className="flex items-center space-x-2 p-3 bg-yellow-900 bg-opacity-20 rounded-lg border border-yellow-800">
                  <AlertCircle className="w-5 h-5 text-yellow-400" />
                  <span className="text-sm text-yellow-400">High correlation detected between GMX and Radiant positions (0.84)</span>
                </div>
                <div className="flex items-center space-x-2 p-3 bg-red-900 bg-opacity-20 rounded-lg border border-red-800">
                  <AlertCircle className="w-5 h-5 text-red-400" />
                  <span className="text-sm text-red-400">Radiant protocol showing elevated risk - consider reducing exposure</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Narrative Performance Tracker */}
        {activeView === 'narratives' && (
          <div className="space-y-6">
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <h2 className="text-2xl font-bold mb-6">Narrative Performance Tracker</h2>

              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-semibold mb-4">30D Performance by Narrative</h3>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={narrativeData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                      <XAxis dataKey="narrative" stroke="#9ca3af" />
                      <YAxis stroke="#9ca3af" />
                      <Tooltip 
                        formatter={(value) => `${value}%`}
                        contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151' }}
                      />
                      <Bar dataKey="performance" fill="#8b5cf6">
                        {narrativeData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.performance > 0 ? '#10b981' : '#ef4444'} />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Market Cap vs Volume</h3>
                  <div className="space-y-3">
                    {narrativeData.map(narrative => (
                      <div key={narrative.narrative} className="bg-gray-800 rounded-lg p-3">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-semibold">{narrative.narrative}</span>
                          <span className={`text-sm ${narrative.performance > 0 ? 'text-green-400' : 'text-red-400'}`}>
                            {narrative.performance > 0 ? '+' : ''}{narrative.performance}%
                          </span>
                        </div>
                        <div className="flex items-center justify-between text-sm text-gray-400">
                          <span>MCap: ${(narrative.mcap / 1e9).toFixed(1)}B</span>
                          <span>Vol: ${(narrative.volume / 1e6).toFixed(0)}M</span>
                          <span>V/M: {((narrative.volume / narrative.mcap) * 100).toFixed(1)}%</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="mt-6 p-4 bg-purple-900 bg-opacity-20 rounded-lg border border-purple-800">
                <p className="text-sm text-purple-400">
                  <TrendingUp className="inline w-4 h-4 mr-2" />
                  AI Agents narrative showing strongest momentum with 145% gain and increasing volume/mcap ratio
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Whale Watch */}
        {activeView === 'whale' && (
          <div className="space-y-6">
            <div className="bg-gray-900 rounded-lg p-6 border border-gray-800">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold">Whale Movement Tracker</h2>
                <div className="flex items-center space-x-2">
                  <Search className="w-4 h-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search by wallet or protocol..."
                    className="bg-gray-800 text-white px-3 py-1 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-purple-600"
                  />
                </div>
              </div>

              <div className="space-y-4">
                {whaleMovements.map((movement, i) => (
                  <div key={i} className="bg-gray-800 rounded-lg p-4 hover:bg-gray-750 transition-all">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                          movement.action === 'Deposit' ? 'bg-green-900 text-green-400' :
                          movement.action === 'Withdraw' ? 'bg-red-900 text-red-400' :
                          'bg-yellow-900 text-yellow-400'
                        }`}>
                          {movement.action === 'Deposit' ? '‚Üì' :
                           movement.action === 'Withdraw' ? '‚Üë' : '‚Üî'}
                        </div>
                        <div>
                          <h3 className="font-semibold">{movement.action}: {movement.amount}</h3>
                          <p className="text-sm text-gray-400">{movement.protocol} ‚Ä¢ {movement.wallet}</p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-4">
                        <div className="text-right">
                          <p className={`text-sm font-semibold ${
                            movement.impact.includes('Bullish') ? 'text-green-400' : 'text-red-400'
                          }`}>
                            {movement.impact}
                          </p>
                          <p className="text-xs text-gray-400">{movement.time}</p>
                        </div>
                        <a
                          href={`#${movement.txHash}`}
                          className="px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded text-sm transition-colors"
                        >
                          View TX
                        </a>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Whale Alert Settings */}
              <div className="mt-6 p-4 bg-gray-800 rounded-lg">
                <h3 className="text-sm font-semibold mb-3">Alert Settings</h3>
                <div className="grid grid-cols-3 gap-4">
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" defaultChecked className="rounded" />
                    <span className="text-sm">Deposits > $1M</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" defaultChecked className="rounded" />
                    <span className="text-sm">Withdrawals > $500K</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" className="rounded" />
                    <span className="text-sm">Track specific wallets</span>
                  </label>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Flow Correlation Backtesting */}
        <div className="mt-6 bg-gray-900 rounded-lg p-6 border border-gray-800">
          <h3 className="text-lg font-semibold mb-4">Flow-to-Price Correlation (Live)</h3>
          <ResponsiveContainer width="100%" height={200}>
            <LineChart data={correlationData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="time" stroke="#9ca3af" />
              <YAxis yAxisId="left" stroke="#9ca3af" />
              <YAxis yAxisId="right" orientation="right" stroke="#9ca3af" />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151' }}
                labelStyle={{ color: '#9ca3af' }}
              />
              <Line yAxisId="left" type="monotone" dataKey="flows" stroke="#8b5cf6" strokeWidth={2} name="Flows" />
              <Line yAxisId="right" type="monotone" dataKey="price" stroke="#10b981" strokeWidth={2} name="Price" />
            </LineChart>
          </ResponsiveContainer>
          <div className="mt-4 flex justify-between text-sm">
            <span className="text-gray-400">Correlation: <span className="text-purple-400 font-semibold">0.73</span></span>
            <span className="text-gray-400">Lag: <span className="text-white font-semibold">6-12 hours</span></span>
            <span className="text-gray-400">Win Rate: <span className="text-green-400 font-semibold">78%</span></span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DeFiAlphaAdvanced;